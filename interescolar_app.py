import streamlit as st
import time
import random

# Preguntas y respuestas almacenadas directamente en el c√≥digo
preguntas = [
    ("¬øQu√© es la pedagog√≠a?", 
     ["Es la disciplina que estudia la filosof√≠a de la educaci√≥n.",
      "Es la disciplina que estudia la educaci√≥n y los m√©todos de ense√±anza.",
      "Es la disciplina que se ocupa de las pol√≠ticas educativas.",
      "Es la ciencia que estudia el comportamiento de los estudiantes."], 1),
     
    ("¬øQui√©n es considerado el padre de la pedagog√≠a moderna?", 
     ["Juan Amos Comenio.", "Paulo Freire.", "Lev Vygotsky.", "Jean Piaget."], 0),
     
    ("¬øQu√© m√©todo de ense√±anza se basa en la exploraci√≥n y el descubrimiento guiado?", 
     ["El aprendizaje por descubrimiento de Jerome Bruner.", "El m√©todo de ense√±anza directa.",
      "El aprendizaje cooperativo.", "El m√©todo Montessori."], 0),
     
    ("¬øQu√© es el aprendizaje significativo seg√∫n David Ausubel?", 
     ["Es el aprendizaje que se basa en la memorizaci√≥n.",
      "Es aquel en el que el estudiante relaciona nuevos conocimientos con los que ya posee.",
      "Es el aprendizaje que ocurre solo a trav√©s de la pr√°ctica.",
      "Es el aprendizaje que se realiza en entornos virtuales."], 1),
     
    ("¬øCu√°l es el principal objetivo de la educaci√≥n seg√∫n la UNESCO?", 
     ["Garantizar el acceso a la educaci√≥n b√°sica.",
      "Garantizar el acceso a una educaci√≥n de calidad, inclusiva y equitativa para todos.",
      "Proveer formaci√≥n para trabajos espec√≠ficos.",
      "Ense√±ar a los estudiantes sobre el patrimonio cultural."], 1),
     
    ("¬øQu√© tipo de aprendizaje fomenta la teor√≠a de Jean Piaget?", 
     ["Aprendizaje por descubrimiento.",
      "Aprendizaje colaborativo.",
      "Aprendizaje constructivista basado en el desarrollo cognitivo del ni√±o.",
      "Aprendizaje basado en competencias."], 2),
     
    ("¬øQu√© es la educaci√≥n inclusiva?", 
     ["Es un modelo educativo que se centra solo en los estudiantes con discapacidad.",
      "Es un modelo educativo que busca garantizar el aprendizaje de todos los estudiantes, sin exclusi√≥n.",
      "Es un enfoque que solo acepta a estudiantes con altos logros acad√©micos.",
      "Es una metodolog√≠a educativa para estudiantes adultos."], 1),
     
    ("¬øCu√°l es la diferencia entre ense√±anza y aprendizaje?", 
     ["La ense√±anza es el proceso de transmitir conocimientos, mientras que el aprendizaje es la adquisici√≥n de los mismos.",
      "La ense√±anza es la actividad realizada por los alumnos, mientras que el aprendizaje es el proceso que llevan a cabo los maestros.",
      "La ense√±anza es m√°s importante que el aprendizaje.",
      "No hay diferencia entre ense√±anza y aprendizaje."], 0),

    ("¬øCu√°l?", 
     ["La ense√±anza es el proceso de transmitir conocimientos, mientras qrendizaje es la adquisici√≥n de los mismos.",
      "La ense√±anza es la actividad realizada por los alumnos,  el aprendizaje es el proceso que llevan a cabo los maestros.",
      "La ense√±anza es m√°s importante rendizaje.",
      "No hay diferencia entre ense√±anzaprendizaje."], 3)
]

# Lista de planteles
planteles = ["Plantel Iztapalapa", "Plantel Netzahualc√≥yotl", "Plantel Guillermo Prieto", "Plantel Manuel Ca√±as"]

# Inicializar el estado de la sesi√≥n
if 'preguntas_restantes' not in st.session_state:
    st.session_state.preguntas_restantes = list(range(len(preguntas)))
if 'puntajes' not in st.session_state:
    st.session_state.puntajes = {plantel: 0 for plantel in planteles}
if 'mostrar_respuesta' not in st.session_state:
    st.session_state.mostrar_respuesta = False
if 'opcion_seleccionada' not in st.session_state:
    st.session_state.opcion_seleccionada = None
if 'plantel_seleccionado' not in st.session_state:
    st.session_state.plantel_seleccionado = None
if 'pantalla_seleccionada' not in st.session_state:
    st.session_state.pantalla_seleccionada = "Panel Principal"
if 'cronometro_iniciado' not in st.session_state:
    st.session_state.cronometro_iniciado = False

# Funci√≥n para reiniciar el temporizador
def reiniciar_temporizador():
    st.session_state.tiempo_inicio = time.time()

# Panel lateral con lista desplegable para elegir pantalla
st.sidebar.title("Men√∫ Principal")
pantalla_anterior = st.session_state.pantalla_seleccionada
st.session_state.pantalla_seleccionada = st.sidebar.selectbox(
    "Selecciona una pantalla:",
    ["Panel Principal", "Trivia Pedag√≥gica"]
)

# Si se cambia a la pantalla de trivia, iniciar cron√≥metro
if pantalla_anterior != "Trivia Pedag√≥gica" and st.session_state.pantalla_seleccionada == "Trivia Pedag√≥gica":
    if st.session_state.preguntas_restantes:
        st.session_state.pregunta_actual = st.session_state.preguntas_restantes.pop(0)
    st.session_state.mostrar_respuesta = False
    st.session_state.cronometro_iniciado = True
    reiniciar_temporizador()

# Pantalla de bienvenida
if st.session_state.pantalla_seleccionada == "Panel Principal":
    st.title("Interescolar ICOM 2025")
    st.title("Trivia Pedag√≥gica üéì")
    
    st.markdown("""
    <div style="text-align: center; font-size: 24px; padding: 20px; border: 2px solid #1976D2; background-color: #E3F2FD; border-radius: 10px; color: #0D47A1;">
        üí° <strong>Pon a prueba tus conocimientos en pedagog√≠a.</strong><br><br>
        30 preguntas, 1 punto por pregunta.<br><br>
        Cada pregunta dispone de un tiempo m√°ximo de 15 segundos para ser respondida.<br><br> 
        El temporizador no cambia con el transcurso del tiempo, sin embargo el tiempo s√≠ transcurre.<br><br>
        <strong>Una vez terminados los 15 segundos, la pregunta pierde su valor (1 punto) el cual ya no se sumar√° al puntaje total del plantel aunque la pregunta se responda correctamente.</strong><br><br>
    </div>
    """, unsafe_allow_html=True)
    
    st.image("https://somich.cl/wp-content/uploads/2025/01/web.jpg", use_container_width=True)

# Pantalla de trivia pedag√≥gica
elif st.session_state.pantalla_seleccionada == "Trivia Pedag√≥gica":
    if not st.session_state.preguntas_restantes and not st.session_state.mostrar_respuesta:
        st.title("Trivia Pedag√≥gica")
        st.write("¬°La trivia ha terminado!")

        plantel_ganador = max(st.session_state.puntajes, key=st.session_state.puntajes.get)
        max_puntos = st.session_state.puntajes[plantel_ganador]
        
        st.markdown(f"""
            <div style="border: 2px solid #4CAF50; padding: 20px; border-radius: 10px; text-align: center; background-color: #F0FFF0; color: #2E7D32; font-size: 24px; font-weight: bold;">
                üèÜ ¬°Felicidades, {plantel_ganador}! üèÜ<br>
                Han ganado la trivia con {max_puntos} puntos.
            </div>
        """, unsafe_allow_html=True)
    
    else:
        pregunta, opciones, respuesta_correcta = preguntas[st.session_state.pregunta_actual]
        st.title("Trivia Pedag√≥gica")

        # Mostrar el n√∫mero de la pregunta en texto peque√±o antes de la pregunta
        st.markdown(f"""
            <div style="font-size: 14px; text-align: left; color: #757575;">
                Pregunta {len(preguntas) - len(st.session_state.preguntas_restantes)}/{len(preguntas)}
            </div>

            <div style="text-align: center; font-size: 35px; font-weight: bold; padding: 10px; border: 2px solid #1976D2; background-color: #E3F2FD; border-radius: 10px; color: #0D47A1;">
                {pregunta}
            </div>
        """, unsafe_allow_html=True)

        # Mostrar el temporizador en el panel lateral solo si la trivia ha comenzado
        if st.session_state.cronometro_iniciado:
            tiempo_restante = max(0, 17 - int(time.time() - st.session_state.tiempo_inicio))
            st.sidebar.header("‚è≥ Tiempo restante:")
            st.sidebar.write(f"**{tiempo_restante} segundos**")

        st.session_state.plantel_seleccionado = st.selectbox("Selecciona el plantel que responde:", planteles)

        opcion_seleccionada = st.radio("Selecciona una respuesta:", opciones, index=None)

        if tiempo_restante == 0 and not st.session_state.mostrar_respuesta:
            st.session_state.mostrar_respuesta = True
            st.session_state.opcion_seleccionada = None
            st.warning(f"‚è≥ ¬°Tiempo agotado! La respuesta correcta es: {opciones[respuesta_correcta]}")

        if st.button("Responder") and not st.session_state.mostrar_respuesta:
            if opcion_seleccionada is not None and st.session_state.plantel_seleccionado:
                st.session_state.mostrar_respuesta = True
                st.session_state.opcion_seleccionada = opciones.index(opcion_seleccionada)
                if st.session_state.opcion_seleccionada == respuesta_correcta:
                    st.success("¬°Correcto! üéâ")
                    st.session_state.puntajes[st.session_state.plantel_seleccionado] += 1
                else:
                    st.error(f"Incorrecto. La respuesta correcta es: {opciones[respuesta_correcta]}")

        if st.session_state.mostrar_respuesta:
            if st.button("Siguiente pregunta"):
                if st.session_state.preguntas_restantes:
                    st.session_state.pregunta_actual = st.session_state.preguntas_restantes.pop(0)
                    st.session_state.mostrar_respuesta = False
                    st.session_state.opcion_seleccionada = None
                    st.session_state.plantel_seleccionado = None
                    reiniciar_temporizador()
                    st.rerun()
                else:
                    st.session_state.mostrar_respuesta = False
                    st.rerun()

    st.sidebar.header("Puntajes por Plantel")
    for plantel, puntaje in st.session_state.puntajes.items():
        st.sidebar.write(f"{plantel}: {puntaje} puntos")
